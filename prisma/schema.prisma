datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  library       Library[]
  accounts      Account[]
  sessions      Session[]
  parts         Part[]
}

model Library {
  id        Int  @id @default(autoincrement())
  name      String
  parts     Part[]
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  dateAdded DateTime @default(now())
  rank Int? @default(0)

  @@unique([name, userId]) // make sure the user has only one library with a given name
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Part {
  id        Int  @id @default(autoincrement())
  name      String
  quantity  Int?
  JLCPartNumber String?
  Supplier  Supplier?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  prices    Price[]
  parameter Parameter[]
  dateAdded DateTime @default(now())
  dateUpdated DateTime @updatedAt
  library Library[] 
  rank Int? @default(0)
  componentId Int?
  componentCategory ComponentType? @relation(fields: [componentId], references: [id], onDelete: Cascade)
}

model Price {
  id        Int  @id @default(autoincrement())
  partId    Int
  part      Part @relation(fields: [partId], references: [id], onDelete: Cascade)
  price     Int
  quantity  Int
  Supplier  String
  dateUpdated DateTime @updatedAt
}

model Parameter {
  id        Int  @id @default(autoincrement())
  name      String
  value     String
  partId    Int
  part      Part @relation(fields: [partId], references: [id], onDelete: Cascade)
}

model ComponentType {
  id       Int   @id @default(autoincrement())
  name      String
  parts     Part[]
}

enum Supplier {
  JLC_BASIC
  JLC_EXTENDED
  MOUSER
  DIGIKEY
  EXTERNAL
}

enum Role {
  USER
  ADMIN
}